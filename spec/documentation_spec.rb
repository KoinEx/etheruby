require_relative '../lib/etheruby'

describe 'documentation cases' do

  # See : https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#examples

  class Foo < Etheruby::Contract
    at_address 0x1234567898766543214256787654321345678
    method :bar do
      parameters array(:fixed128x128, 2)
    end
    method :baz do
      parameters :uint32, :bool
      returns :bool
    end
    method :sam do
      parameters :bytes, :bool, array(:uint256)
      returns :bool
    end
  end

  it do
    call = {
      to: "0x1234567898766543214256787654321345678",
      data: "0xab55044d00000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000880000000000000000000000000000000"
    }
    expect(Foo).to receive(:call_api).with(call) do
      { 'result' => '0x' }
    end
    Foo.bar([2.125, 8.5])
  end

  it do
    call = {
      to: "0x1234567898766543214256787654321345678",
      data: "0xcdcd77c000000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001"
    }
    expect(Foo).to receive(:call_api).with(call) do
      {'result'=>'0x0000000000000000000000000000000000000000000000000000000000000000'}
    end
    expect(Foo.baz(69,true)).to eq(false)
  end

  it do
    call = {
      to: "0x1234567898766543214256787654321345678",
      data: "0xa5643bf20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003"
    }
    expect(Foo).to receive(:call_api).with(call) do
      {'result'=>'0x0000000000000000000000000000000000000000000000000000000000000000'}
    end
    Foo.sam("dave".codepoints, true, [1,2,3])
  end

end
